package gr.teachspot.library.enumeration;

import gr.teachspot.library.domain.User;

/**
 * This enumeration contains unique fault id per business case/action. Each code should be declared at
 * exception_*.properties files, since it is used for returning a corresponding message to the end user.
 */
public enum FaultReason {
	/** Error generated by authentication failure. */
	AUTHENTICATION_FAILED(100L, "authenticationFailed"),

	/** Error generated by failing to find specific {@link User}. */
	USER_NOT_FOUND(200L, "userNotFound"),

	/** Error generated by failing to delete specific {@link User}. */
	USER_CANNOT_BE_DELETED(201L, "userCannotBeDeleted"),

	/** Error generated when username already exists. */
	USERNAME_EXISTS(203L, "usernameExists"),

	/** Error generated when {@link User} password is wrong. */
	USER_WRONG_PASSWORD(204L, "userWrongPassword"),

	/** Error generated when {@link User} password is wrong. */
	USER_WRONG_PASSWORD_POLICY(205L, "userWrongPasswordPolicy"),

	/** Error generated when a locked {@link User} attempts to login. */
	USER_LOCKED(206L, "userLocked"),

	/** Error generated when an inactive {@link User} attempts to login. */
	USER_INACTIVE(207L, "userInactive"),

	/** Error generated when username already exists. */
	USER_EMAIL_EXISTS(208L, "userEmailExists"),

	/** Error generated by being unable to connect to the database. */
	DB_CONNECTION_FAILED(300L, "dbConnectionFailed"),

	/** Error generated by trying to perform an action which is not allowed. */
	INSUFFICIENT_ACCESS_RIGHT(400L, "insufficientAccessRight"),

	/** Error generated when there is a mismatch between the {@link User} trying to call a service and the session {@link User}. */
	UNAUTHORISED_USER(505L, "unauthorisedUser"),

	/** Error generated when email fails to be send. */
	MAIL_SENDER_FAILURE(600L, "mailSenderFailureException"),

	/** Error generated during preparing the template */
	MAIL_PREPARATION_FAILURE(601L, "mailPreparationFailureException"),

	/** Error generated when activating an already active category */
	CATEGORY_ALREADY_ACTIVATED(700L, "categoryAlreadyActivatedException"),

	/** Error generated when project with the same name already exists. */
	PROJECT_NAME_EXISTS(405L, "projectExists"),

	/** No SSO solution found */
	SHELF_SPACE_OPTIMIZATION_NO_SOLUTION_FOUND(804L, "noSSOSolutionFound"),

	/** Error on target total shelf space */
	SHELF_SPACE_TOTAL_SPACE(800L, "targetTotalShelfSpaceValidation"),

	/** Validation error on copy to SSO. Invalid products distribution. Scenario invalid for SSO */
	SHELF_SPACE_OPTIMIZATION_INVALID_DISTRIBUTION(801L, "invalidDistribution"),

	/** Validation error on copy to SSO. Initial Optimum Product List has changed. Scenario is valid for SSO after User approval. */
	SHELF_SPACE_OPTIMIZATION_CHANGED_INITIAL_PRODUCTS(802L, "changedInitialProducts"),

	/** The generic error. */
	GENERIC_ERROR(900L, "changedInitialProducts");


    /** The Id. */
    private final Long id;

    /** The Resource key represents the fault reason's message bundle key. */
    private final String resourceKey;

    /**
     * Instantiates a new {@link FaultReason}.
     *
     * @param id the fault code
     */
    private FaultReason(final Long id, String resourceKey) {
        this.id = id;
        this.resourceKey = resourceKey;
    }

    /**
     * Gets the {@link FaultReason} for the given case.
     *
     * @return the code
     */
    public Long getId() {
        return id;
    }

    /**
     * Returns the key that represents this error message in the resource bundle.
     *
     * @return the key that represents this error message in the resource bundle
     */
    public String getResourceKey() {
        return resourceKey;
    }

    /**
     * Gets the {@link FaultReason} associated with given code.
     *
     * @param id the
     *           id
     * @return the fault id
     */
    public static FaultReason get(final Long id) {
        for (final FaultReason faultId : FaultReason.values()) {
            if (faultId.getId().equals(id)) {
                return faultId;
            }
        }
        return null;
    }
}
